{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n// USERNAME\n\n// Username validation for login page\nexport async function validateUsername(values) {\n  const error = verifyUsername({}, values);\n  return error;\n}\n\n// Username validation\nfunction verifyUsername(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error('Username Required!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Invalid Username!');\n  }\n  return error;\n}\n\n// ---------------------------------------------------------------------\n\n// PASSOWRD\n\n// password validation for login page\nexport async function validatePassword(values) {\n  const error = verifyPassword({}, values);\n  return error;\n}\n\n// Password validation\nfunction verifyPassword(error = {}, values) {\n  const specialCharacters = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/;\n  const regex = /[A-Z]/;\n  if (!values.password) {\n    error.password = toast.error('Password Required!');\n  } else if (values.password.includes(\" \")) {\n    error.password = toast.error('Incorrect password, please try with another password!');\n  } else if (values.password.length < 8) {\n    error.password = toast.error('Password must be 8 characters long!');\n  } else if (!specialCharacters.test(values.password)) {\n    error.password = toast.error('Password must have a special chracter!');\n  } else if (!regex.test(values.password)) {\n    error.password = toast.error('Password must have at lease one uppercase!');\n  }\n  return error;\n}\n\n// ---------------------------------------------------------------------\n\n// RESET-PASSOWRD\n\n// Reset password validation for login page\nexport async function validateResetPassword(values) {\n  const errors = verifyPassword({}, values);\n  if (values.password !== values.confirmPassword) {\n    errors.exist = toast.error(\"Password and Confirm passwords are not matching!\");\n  }\n  return errors;\n}\n\n// Reset-password validation","map":{"version":3,"names":["toast","validateUsername","values","error","verifyUsername","username","includes","validatePassword","verifyPassword","specialCharacters","regex","password","length","test","validateResetPassword","errors","confirmPassword","exist"],"sources":["E:/expressJS/github clone/MERN_AuthProject_Fullstack/frontend/src/helper/Validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n                                        // USERNAME\r\n\r\n// Username validation for login page\r\nexport async function validateUsername (values) {\r\n    const error = verifyUsername({}, values)\r\n\r\n    return error\r\n}\r\n\r\n// Username validation\r\nfunction verifyUsername (error = {}, values) {\r\n    if (!values.username) {\r\n        error.username = toast.error('Username Required!')\r\n    }\r\n    else if (values.username.includes(\" \")) {\r\n        error.username = toast.error('Invalid Username!')\r\n    }\r\n\r\n    return error\r\n}\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n                                        // PASSOWRD\r\n\r\n// password validation for login page\r\nexport async function validatePassword (values) {\r\n    const error = verifyPassword({}, values)\r\n\r\n    return error\r\n}\r\n\r\n// Password validation\r\nfunction verifyPassword (error = {}, values) {\r\n\r\n    const specialCharacters = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/;\r\n    const regex = /[A-Z]/;\r\n\r\n    if (!values.password) {\r\n        error.password = toast.error('Password Required!')\r\n    }\r\n    else if (values.password.includes(\" \")) {\r\n        error.password = toast.error('Incorrect password, please try with another password!')\r\n    }\r\n    else if (values.password.length < 8) {\r\n        error.password = toast.error('Password must be 8 characters long!')\r\n    }\r\n    else if (!specialCharacters.test(values.password)) {\r\n        error.password = toast.error('Password must have a special chracter!')\r\n    } \r\n    else if (!regex.test(values.password)) {\r\n        error.password = toast.error('Password must have at lease one uppercase!')\r\n    }\r\n \r\n    return error\r\n}\r\n\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n                                        // RESET-PASSOWRD\r\n\r\n// Reset password validation for login page\r\nexport async function validateResetPassword (values) {\r\n    const errors = verifyPassword({}, values)\r\n\r\n    if(values.password !== values.confirmPassword) {\r\n        errors.exist = toast.error(\"Password and Confirm passwords are not matching!\")\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\n// Reset-password validation"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAEK;;AAExC;AACA,OAAO,eAAeC,gBAAgBA,CAAEC,MAAM,EAAE;EAC5C,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EAExC,OAAOC,KAAK;AAChB;;AAEA;AACA,SAASC,cAAcA,CAAED,KAAK,GAAG,CAAC,CAAC,EAAED,MAAM,EAAE;EACzC,IAAI,CAACA,MAAM,CAACG,QAAQ,EAAE;IAClBF,KAAK,CAACE,QAAQ,GAAGL,KAAK,CAACG,KAAK,CAAC,oBAAoB,CAAC;EACtD,CAAC,MACI,IAAID,MAAM,CAACG,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpCH,KAAK,CAACE,QAAQ,GAAGL,KAAK,CAACG,KAAK,CAAC,mBAAmB,CAAC;EACrD;EAEA,OAAOA,KAAK;AAChB;;AAEA;;AAGwC;;AAExC;AACA,OAAO,eAAeI,gBAAgBA,CAAEL,MAAM,EAAE;EAC5C,MAAMC,KAAK,GAAGK,cAAc,CAAC,CAAC,CAAC,EAAEN,MAAM,CAAC;EAExC,OAAOC,KAAK;AAChB;;AAEA;AACA,SAASK,cAAcA,CAAEL,KAAK,GAAG,CAAC,CAAC,EAAED,MAAM,EAAE;EAEzC,MAAMO,iBAAiB,GAAG,uCAAuC;EACjE,MAAMC,KAAK,GAAG,OAAO;EAErB,IAAI,CAACR,MAAM,CAACS,QAAQ,EAAE;IAClBR,KAAK,CAACQ,QAAQ,GAAGX,KAAK,CAACG,KAAK,CAAC,oBAAoB,CAAC;EACtD,CAAC,MACI,IAAID,MAAM,CAACS,QAAQ,CAACL,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpCH,KAAK,CAACQ,QAAQ,GAAGX,KAAK,CAACG,KAAK,CAAC,uDAAuD,CAAC;EACzF,CAAC,MACI,IAAID,MAAM,CAACS,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACjCT,KAAK,CAACQ,QAAQ,GAAGX,KAAK,CAACG,KAAK,CAAC,qCAAqC,CAAC;EACvE,CAAC,MACI,IAAI,CAACM,iBAAiB,CAACI,IAAI,CAACX,MAAM,CAACS,QAAQ,CAAC,EAAE;IAC/CR,KAAK,CAACQ,QAAQ,GAAGX,KAAK,CAACG,KAAK,CAAC,wCAAwC,CAAC;EAC1E,CAAC,MACI,IAAI,CAACO,KAAK,CAACG,IAAI,CAACX,MAAM,CAACS,QAAQ,CAAC,EAAE;IACnCR,KAAK,CAACQ,QAAQ,GAAGX,KAAK,CAACG,KAAK,CAAC,4CAA4C,CAAC;EAC9E;EAEA,OAAOA,KAAK;AAChB;;AAIA;;AAGwC;;AAExC;AACA,OAAO,eAAeW,qBAAqBA,CAAEZ,MAAM,EAAE;EACjD,MAAMa,MAAM,GAAGP,cAAc,CAAC,CAAC,CAAC,EAAEN,MAAM,CAAC;EAEzC,IAAGA,MAAM,CAACS,QAAQ,KAAKT,MAAM,CAACc,eAAe,EAAE;IAC3CD,MAAM,CAACE,KAAK,GAAGjB,KAAK,CAACG,KAAK,CAAC,kDAAkD,CAAC;EAClF;EAEA,OAAOY,MAAM;AACjB;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}