{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n// Username, Email, Password validation\n\n// Username validation\nfunction verifyUsername(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error('Username Required!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Invalid Username!');\n  }\n  return error;\n}\n\n// Password validation\nfunction verifyPassword(error = {}, values) {\n  const specialCharacters = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/;\n  const regex = /[A-Z]/;\n  if (!values.password) {\n    error.password = toast.error('Password Required!');\n  } else if (values.password.includes(\" \")) {\n    error.password = toast.error('Incorrect password, please try with another password!');\n  } else if (values.password.length < 8) {\n    error.password = toast.error('Password must be 8 characters long!');\n  } else if (!specialCharacters.test(values.password)) {\n    error.password = toast.error('Password must have a special chracter!');\n  } else if (!regex.test(values.password)) {\n    error.password = toast.error('Password must have at lease one uppercase!');\n  }\n  return error;\n}\n\n// ---------------------------------------------------------------------\n\n// USERNAME / LOGIN\n\n// Username validation for login page\nexport async function validateUsername(values) {\n  const error = verifyUsername({}, values);\n  return error;\n}\n\n// ---------------------------------------------------------------------\n\n// PASSOWRD\n\n// password validation for login page\nexport async function validatePassword(values) {\n  const error = verifyPassword({}, values);\n  return error;\n}\n\n// ---------------------------------------------------------------------\n\n// REGISTER\n\n// Register form validation \nexport async function validateRegister(values) {\n  const errors = verifyUsername({}, values);\n  verifyPassword(errors, values);\n}\n\n// Email validation\nfunction verifyEmail(values) {}\n\n// ---------------------------------------------------------------------\n\n// RESET-PASSOWRD\n\n// Reset password validation for login page\nexport async function validateResetPassword(values) {\n  const errors = verifyPassword({}, values);\n  if (values.password !== values.confirmPassword) {\n    errors.exist = toast.error(\"Password and Confirm passwords are not matching!\");\n  }\n  return errors;\n}","map":{"version":3,"names":["toast","verifyUsername","error","values","username","includes","verifyPassword","specialCharacters","regex","password","length","test","validateUsername","validatePassword","validateRegister","errors","verifyEmail","validateResetPassword","confirmPassword","exist"],"sources":["E:/expressJS/github clone/MERN_AuthProject_Fullstack/frontend/src/helper/Validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n\r\n                                        // Username, Email, Password validation\r\n\r\n// Username validation\r\nfunction verifyUsername (error = {}, values) {\r\n    if (!values.username) {\r\n        error.username = toast.error('Username Required!')\r\n    }\r\n    else if (values.username.includes(\" \")) {\r\n        error.username = toast.error('Invalid Username!')\r\n    }\r\n\r\n    return error\r\n}\r\n\r\n\r\n// Password validation\r\nfunction verifyPassword (error = {}, values) {\r\n\r\n    const specialCharacters = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?~]/;\r\n    const regex = /[A-Z]/;\r\n\r\n    if (!values.password) {\r\n        error.password = toast.error('Password Required!')\r\n    }\r\n    else if (values.password.includes(\" \")) {\r\n        error.password = toast.error('Incorrect password, please try with another password!')\r\n    }\r\n    else if (values.password.length < 8) {\r\n        error.password = toast.error('Password must be 8 characters long!')\r\n    }\r\n    else if (!specialCharacters.test(values.password)) {\r\n        error.password = toast.error('Password must have a special chracter!')\r\n    } \r\n    else if (!regex.test(values.password)) {\r\n        error.password = toast.error('Password must have at lease one uppercase!')\r\n    }\r\n \r\n    return error\r\n}\r\n\r\n\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n\r\n                                        // USERNAME / LOGIN\r\n\r\n// Username validation for login page\r\nexport async function validateUsername (values) {\r\n    const error = verifyUsername({}, values)\r\n\r\n    return error\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n                                        // PASSOWRD\r\n\r\n// password validation for login page\r\nexport async function validatePassword (values) {\r\n    const error = verifyPassword({}, values)\r\n\r\n    return error\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n                                        // REGISTER\r\n                                        \r\n// Register form validation \r\nexport async function validateRegister (values) {\r\n    const errors = verifyUsername({}, values)\r\n    verifyPassword(errors, values)\r\n} \r\n\r\n// Email validation\r\nfunction verifyEmail (values) {\r\n    \r\n}\r\n\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n\r\n\r\n                                        // RESET-PASSOWRD\r\n\r\n// Reset password validation for login page\r\nexport async function validateResetPassword (values) {\r\n    const errors = verifyPassword({}, values)\r\n\r\n    if(values.password !== values.confirmPassword) {\r\n        errors.exist = toast.error(\"Password and Confirm passwords are not matching!\")\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAGK;;AAExC;AACA,SAASC,cAAcA,CAAEC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAE;EACzC,IAAI,CAACA,MAAM,CAACC,QAAQ,EAAE;IAClBF,KAAK,CAACE,QAAQ,GAAGJ,KAAK,CAACE,KAAK,CAAC,oBAAoB,CAAC;EACtD,CAAC,MACI,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpCH,KAAK,CAACE,QAAQ,GAAGJ,KAAK,CAACE,KAAK,CAAC,mBAAmB,CAAC;EACrD;EAEA,OAAOA,KAAK;AAChB;;AAGA;AACA,SAASI,cAAcA,CAAEJ,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAE;EAEzC,MAAMI,iBAAiB,GAAG,uCAAuC;EACjE,MAAMC,KAAK,GAAG,OAAO;EAErB,IAAI,CAACL,MAAM,CAACM,QAAQ,EAAE;IAClBP,KAAK,CAACO,QAAQ,GAAGT,KAAK,CAACE,KAAK,CAAC,oBAAoB,CAAC;EACtD,CAAC,MACI,IAAIC,MAAM,CAACM,QAAQ,CAACJ,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpCH,KAAK,CAACO,QAAQ,GAAGT,KAAK,CAACE,KAAK,CAAC,uDAAuD,CAAC;EACzF,CAAC,MACI,IAAIC,MAAM,CAACM,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACjCR,KAAK,CAACO,QAAQ,GAAGT,KAAK,CAACE,KAAK,CAAC,qCAAqC,CAAC;EACvE,CAAC,MACI,IAAI,CAACK,iBAAiB,CAACI,IAAI,CAACR,MAAM,CAACM,QAAQ,CAAC,EAAE;IAC/CP,KAAK,CAACO,QAAQ,GAAGT,KAAK,CAACE,KAAK,CAAC,wCAAwC,CAAC;EAC1E,CAAC,MACI,IAAI,CAACM,KAAK,CAACG,IAAI,CAACR,MAAM,CAACM,QAAQ,CAAC,EAAE;IACnCP,KAAK,CAACO,QAAQ,GAAGT,KAAK,CAACE,KAAK,CAAC,4CAA4C,CAAC;EAC9E;EAEA,OAAOA,KAAK;AAChB;;AAKA;;AAIwC;;AAExC;AACA,OAAO,eAAeU,gBAAgBA,CAAET,MAAM,EAAE;EAC5C,MAAMD,KAAK,GAAGD,cAAc,CAAC,CAAC,CAAC,EAAEE,MAAM,CAAC;EAExC,OAAOD,KAAK;AAChB;;AAGA;;AAGwC;;AAExC;AACA,OAAO,eAAeW,gBAAgBA,CAAEV,MAAM,EAAE;EAC5C,MAAMD,KAAK,GAAGI,cAAc,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;EAExC,OAAOD,KAAK;AAChB;;AAGA;;AAGwC;;AAExC;AACA,OAAO,eAAeY,gBAAgBA,CAAEX,MAAM,EAAE;EAC5C,MAAMY,MAAM,GAAGd,cAAc,CAAC,CAAC,CAAC,EAAEE,MAAM,CAAC;EACzCG,cAAc,CAACS,MAAM,EAAEZ,MAAM,CAAC;AAClC;;AAEA;AACA,SAASa,WAAWA,CAAEb,MAAM,EAAE,CAE9B;;AAIA;;AAGwC;;AAExC;AACA,OAAO,eAAec,qBAAqBA,CAAEd,MAAM,EAAE;EACjD,MAAMY,MAAM,GAAGT,cAAc,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;EAEzC,IAAGA,MAAM,CAACM,QAAQ,KAAKN,MAAM,CAACe,eAAe,EAAE;IAC3CH,MAAM,CAACI,KAAK,GAAGnB,KAAK,CAACE,KAAK,CAAC,kDAAkD,CAAC;EAClF;EAEA,OAAOa,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}